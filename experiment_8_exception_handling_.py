# -*- coding: utf-8 -*-
"""Experiment_8_Exception_Handling .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kpYmZqcdBoDMixHm24K592iMuuBVDNS-

Safe Division Calculator: You're building a simple calculator app. One of the most common
issues is when a user tries to divide by zero. Write a program that takes two numbers from the
user and performs division. Use try-except to handle ZeroDivisionError and display an
appropriate message like "Cannot divide by zero".
"""

try:
    a = float(input("Enter first number: "))
    b = float(input("Enter second number: "))
    print("Addition:", a + b)
    print("Subtraction:", a - b)
    print("Multiplication:", a * b)
    try:
        print("Division:", a / b)
    except ZeroDivisionError:
        print("Cannot divide by zero")
except ValueError:
    print("Please enter valid numbers.")

"""Robust List Indexing: You’re developing a student report viewer. Users may sometimes enter
an invalid index to view a student’s mark. Write a program that accesses an element from a
predefined list of marks using an index provided by the user. Use exception handling to catch
IndexError and print "Invalid index entered. Please try again."
"""

marks = [85, 90, 78, 92, 88]
try:
    i = int(input("Enter index to access marks (0 to 4): "))
    print("Mark:", marks[i])
except IndexError:
    print("Invalid index entered. Please try again.")

"""Type-Safe Input for Integer Conversion: You’re building a data entry form. Sometimes users
enter text when a number is expected. Write a program that takes user input and converts it to
an integer. Handle ValueError using a try-except block and print "Please enter a valid
number." if the input is not convertible.
"""

try:
    n = int(input("Enter a number: "))
    print("You entered:", n)
except ValueError:
    print("Please enter a valid number.")